{"version":3,"sources":["components/DropArea/DropArea.tsx","components/Header/Header.tsx","components/Result/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DropArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dropzone","onDrop","bind","assertThisInitialized","imageFiles","files","_this2","setState","setResults","length","file","reader","FileReader","onload","event","binaryString","target","result","upload","btoa","readAsBinaryString","error","base64String","_this3","byteArray","require","toByteArray","fetch","body","headers","Content-Type","method","then","response","ok","json","faceAttributes","age","react","className","es","accept","style","position","map","key","name","src","preview","React","Header","Result","filelength","react_loader_spinner_default","a","type","color","height","width","App","resultstate","resultString","filelen","react_default","createElement","Header_Header","DropArea_DropArea_DropArea","Result_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAcqBA,qBACjB,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAUR,EAAKS,OAAOC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACVY,WAAY,IAJIZ,sEAQVa,GAAY,IAAAC,EAAAX,KACtBA,KAAKY,SAAS,CACVH,WAAYC,IAEhBV,KAAKJ,MAAMiB,WAAW,GAAGb,KAAKI,MAAMK,WAAWK,QAC/C,IAAMC,EAAOL,EAAM,GACbM,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACb,IAAMC,EAAgBD,EAAME,OAAsBC,OACtB,kBAAjBF,GACPT,EAAKY,OAAOC,KAAKJ,KAGzB,IACIJ,EAAOS,mBAAmBV,GAC7B,MAAMW,GACH1B,KAAKJ,MAAMiB,WAAW,4EAA4E,mCAI5Fc,GAAmB,IAAAC,EAAA5B,KAEvB6B,EADSC,EAAQ,IACEC,YAAYJ,GACrCK,MAAM,6CAA8C,CAChDC,KAAMJ,EACNK,QAAS,CACLC,eAAgB,4BAEpBC,OAAQ,SAEPC,KAAK,SAACC,GACEA,EAASC,GAGVD,EAASE,OAAOH,KAAK,SAACG,GACfA,EAAK1B,OAAO,EACXc,EAAKhC,MAAMiB,WAAW,yBAAyBe,EAAKxB,MAAMK,WAAWK,QAErEc,EAAKhC,MAAMiB,WAAW,UAAU2B,EAAK,GAAGC,eAAeC,IAAId,EAAKxB,MAAMK,WAAWK,UANzFc,EAAKhC,MAAMiB,WAAW,2BAA2Be,EAAKxB,MAAMK,WAAWK,2CAcnF,OACI6B,EAAA,qBAAKC,UAAU,QACXD,EAAA,qBAAKC,UAAU,cACXD,EAAA,qBAAKC,UAAU,YACXD,EAAA,cAACE,EAAA,EAAD,CAAeC,OAAO,UAAUxC,OAAQN,KAAKI,MAAMC,SAAU0C,MAAO,CAAEC,SAAU,aAC5EL,EAAA,qBAAKC,UAAU,gBAEP5C,KAAKI,MAAMK,WAAWK,OAAS,EAC3B6B,EAAA,yBAAM3C,KAAKI,MAAMK,WAAWwC,IAAI,SAAClC,GAAD,OAAU4B,EAAA,qBAAKC,UAAU,SAASM,IAAKnC,EAAKoC,KAAMC,IAAKrC,EAAKsC,aAC5FV,EAAA,wGAhEFW,oBCXvB,SAASC,IACpB,OACIZ,EAAA,qBAAKC,UAAU,UACXD,EAAA,oBAAIC,UAAU,cAAd,uHCESY,mLAGjB,OACEb,EAAA,qBAAKC,UAAU,QAEW,KAAtB5C,KAAKJ,MAAM0B,QAAiBtB,KAAKJ,MAAM6D,WAAW,EAChDd,EAAA,cAACe,EAAAC,EAAD,CAAQC,KAAK,WAAWC,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAC3DpB,EAAA,uBAAI3C,KAAKJ,MAAM0B,gBARSgC,aCyBnBU,cAtBf,SAAAA,EAAmBpE,GAAU,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgE,IAC3BnE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkE,GAAA7D,KAAAH,KAAMJ,KAeCqE,YAAc,SAACC,EAAoBC,GACxCtE,EAAKe,SAAS,CAACU,OAAO4C,EAAaT,WAAWU,KAfhDtE,EAAKO,MAAQ,CACXqD,WAAW,EACXnC,OAAO,IAJkBzB,wEAQ3B,OACEuE,EAAAT,EAAAU,cAAA,WACED,EAAAT,EAAAU,cAACC,EAAD,MACAF,EAAAT,EAAAU,cAACE,EAAD,CAAU1D,WAAYb,KAAKiE,cAC3BG,EAAAT,EAAAU,cAACG,EAAD,CAAQlD,OAAQtB,KAAKI,MAAMkB,OAAQmC,WAAYzD,KAAKI,MAAMqD,qBAbhDH,IAAMmB,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAT,EAAAU,cAACY,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.6450c684.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport ReactDropzone from 'react-dropzone'\r\nimport './DropArea.css'\r\n\r\ninterface IState {\r\n    dropzone: any\r\n    imageFiles: any[]\r\n    \r\n}\r\n\r\ninterface IProps{\r\n    setResults:any\r\n}\r\n\r\nexport default class DropArea extends React.Component<IProps, IState>{\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            dropzone: this.onDrop.bind(this),\r\n            imageFiles: [],\r\n        }\r\n    }\r\n\r\n    public onDrop(files: any) {\r\n        this.setState({\r\n            imageFiles: files,\r\n        })\r\n        this.props.setResults(\"\",this.state.imageFiles.length)\r\n        const file = files[0]\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n            const binaryString = (event.target as FileReader).result;\r\n            if (typeof binaryString === \"string\") {\r\n                this.upload(btoa(binaryString))\r\n            }\r\n        };\r\n        try{\r\n            reader.readAsBinaryString(file);\r\n        }catch(error){\r\n            this.props.setResults(\"Sorry we had trouble loading that file please use a downloaded image file\",0);\r\n        }\r\n    }\r\n\r\n    public upload(base64String: any) {\r\n        const base64 = require('base64-js');\r\n        const byteArray = base64.toByteArray(base64String);\r\n        fetch('https://whatsmyage.azurewebsites.net/image', {\r\n            body: byteArray,\r\n            headers: {\r\n                'Content-Type': 'application/octet-stream',\r\n            },\r\n            method: 'POST'\r\n        })\r\n            .then((response: any) => {\r\n                if (!response.ok) {\r\n                    this.props.setResults(\"Sorry there was an error\",this.state.imageFiles.length)\r\n                } else {\r\n                    response.json().then((json: any[]) => {\r\n                        if(json.length<1){\r\n                            this.props.setResults(\"Sorry no face detected\",this.state.imageFiles.length)\r\n                        }else{\r\n                            this.props.setResults(\"Age is \"+json[0].faceAttributes.age,this.state.imageFiles.length)\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"cont\">\r\n                <div className=\"centreText\">\r\n                    <div className=\"dropZone\">\r\n                        <ReactDropzone accept='image/*' onDrop={this.state.dropzone} style={{ position: \"relative\" }}>\r\n                            <div className=\"dropZoneText\">\r\n                                {\r\n                                    this.state.imageFiles.length > 0 ?\r\n                                        <div>{this.state.imageFiles.map((file) => <img className=\"image1\" key={file.name} src={file.preview} />)}</div> :\r\n                                        <p>Try dropping some files here, or click to select files to upload.</p>\r\n                                }\r\n                            </div>\r\n                        </ReactDropzone>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n  }","import * as React from 'react'\r\nimport './Header.css'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className='headerText'>ðŸ”¥ðŸ”¥How Old? ðŸ¤”ðŸ¤‘ðŸ‘ŒðŸ”¥ðŸ”¥</h1>\r\n        </div>\r\n    )\r\n}","import * as React from 'react'\r\nimport Loader from 'react-loader-spinner'\r\n\r\ninterface IProps{\r\n  result:string\r\n  filelength:any\r\n}\r\n\r\nexport default class Result extends React.Component<IProps,{}> {\r\n  \r\n  public render() {\r\n    return (\r\n      <div className=\"dank\">\r\n        {\r\n          this.props.result === \"\" && this.props.filelength>0 ?\r\n            <Loader type=\"TailSpin\" color=\"#2b0707\" height={80} width={80} /> :\r\n            <p>{this.props.result}</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport DropArea from './components/DropArea/DropArea'\r\nimport Header from './components/Header/Header'\r\nimport Result from './components/Result/Result'\r\n\r\ninterface IState {\r\n  filelength:number\r\n  result:string\r\n}\r\n\r\nclass App extends React.Component<{},IState>{\r\n  public constructor(props:any){\r\n    super(props)\r\n    this.state = {\r\n      filelength:0,\r\n      result:\"\",\r\n    }\r\n  }\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <DropArea setResults={this.resultstate} />\r\n        <Result result={this.state.result} filelength={this.state.filelength} />\r\n      </div>\r\n    );\r\n  }\r\n    public resultstate = (resultString:string,filelen:any) => {\r\n      this.setState({result:resultString,filelength:filelen})\r\n    }\r\n\r\n  }\r\n  \r\n  export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}